<?php
namespace numkms\yii2images\behaviors;
use common\modules\event\models\Event;
use numkms\yii2images\behaviors\ImageBehave;
use rico\yii2images\models\PlaceHolder;
use Yii;
use yii\base\Behavior;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

class UploadBehavior extends Behavior  {

    /* @var string Атрибут модели в котором содержится картинка */
    public $fileAttribute;
    public $filesAttribute;

    /* @var ActiveRecord */
    public $owner;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function events()
    {
        $thisEvents =  [
            BaseActiveRecord::EVENT_BEFORE_VALIDATE => 'beforeValidate',
            BaseActiveRecord::EVENT_BEFORE_INSERT => 'beforeSave',
            BaseActiveRecord::EVENT_BEFORE_UPDATE => 'beforeSave',
            BaseActiveRecord::EVENT_AFTER_INSERT => 'afterSave',
            BaseActiveRecord::EVENT_AFTER_UPDATE => 'afterSave',
            BaseActiveRecord::EVENT_AFTER_DELETE => 'afterDelete',
        ];

        return ArrayHelper::merge($thisEvents,parent::events());
    }


    public function beforeSave(){

        return true;
    }

    public function afterSave() {

        if(!empty($this->filesAttribute) || !empty($this->fileAttribute)) {
            $this->upload();
        }

        return true;
    }

    public function afterDelete(){
        foreach ($this->getImages() as $image) {
            $image->delete();
        }
        return true;
    }

    public function beforeValidate(){

        return true;
    }

    private function uploadOne(UploadedFile $file){

        $dir = Yii::$app->getModule('yii2images')->imagesStorePath . '/' . md5($file->baseName.time()) . '.' . $file->extension;
        $file->saveAs($dir);

        if(!($this->getImage() instanceof PlaceHolder)){
            $filePath = Yii::$app->getModule('yii2images')->imagesStorePath . '/' .$this->getImage()->filePath;
            $this->getImage()->delete();
            unlink($filePath);

        }

        $this->setMainImage($this->attachImage($dir));

    }

    private function uploadMany(array $files){

        foreach ($files as $file) {
            /** @var UploadedFile $file */
            $dir = Yii::$app->getModule('yii2images')->imagesStorePath . '/' . md5($file->baseName.time()) . '.' . $file->extension;
            $file->saveAs($dir);
            $this->attachImage($dir);

        }

    }

    /**
     * Сохранение файла
     * @return bool
     */
    public function upload()
    {
        if($this->fileAttribute) {
            $file = UploadedFile::getInstance($this->owner, $this->fileAttribute);
            if($file) {
                $this->uploadOne($file);
            }

        }

        if($this->filesAttribute) {
            $files = UploadedFile::getInstances($this->owner, $this->filesAttribute);
            if($files) {
                $this->uploadMany($files);
            }

        }

        return true;
    }


}